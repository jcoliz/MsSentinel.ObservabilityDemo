//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace MsSentinel.ObservabilityDemo.MockApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MockApiClient 
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public MockApiClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Admin_SetFailureStatesAsync(FailureModesSpecification body)
        {
            return Admin_SetFailureStatesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Admin_SetFailureStatesAsync(FailureModesSpecification body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "admin/failures"
                    urlBuilder_.Append("admin/failures");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Activities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActivityResponse> SyntheticS1_GetActivitiesAsync(string user_Agent, System.DateTimeOffset? createdAt__gt, System.DateTimeOffset? createdAt__lt, System.DateTimeOffset? updatedAt__gt, System.DateTimeOffset? updatedAt__lt, int? limit, int? cursor)
        {
            return SyntheticS1_GetActivitiesAsync(user_Agent, createdAt__gt, createdAt__lt, updatedAt__gt, updatedAt__lt, limit, cursor, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Activities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActivityResponse> SyntheticS1_GetActivitiesAsync(string user_Agent, System.DateTimeOffset? createdAt__gt, System.DateTimeOffset? createdAt__lt, System.DateTimeOffset? updatedAt__gt, System.DateTimeOffset? updatedAt__lt, int? limit, int? cursor, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_Agent != null)
                        request_.Headers.TryAddWithoutValidation("User-Agent", ConvertToString(user_Agent, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "web/api/v2.1/activities"
                    urlBuilder_.Append("web/api/v2.1/activities");
                    urlBuilder_.Append('?');
                    if (createdAt__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAt__gt")).Append('=').Append(System.Uri.EscapeDataString(createdAt__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdAt__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAt__lt")).Append('=').Append(System.Uri.EscapeDataString(createdAt__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAt__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt__gt")).Append('=').Append(System.Uri.EscapeDataString(updatedAt__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAt__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt__lt")).Append('=').Append(System.Uri.EscapeDataString(updatedAt__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cursor != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivityResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Activities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AgentResponse> SyntheticS1_GetAgentsAsync(System.DateTimeOffset? createdAt__gt, System.DateTimeOffset? createdAt__lt, System.DateTimeOffset? updatedAt__gt, System.DateTimeOffset? updatedAt__lt, int? limit, int? cursor)
        {
            return SyntheticS1_GetAgentsAsync(createdAt__gt, createdAt__lt, updatedAt__gt, updatedAt__lt, limit, cursor, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Activities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AgentResponse> SyntheticS1_GetAgentsAsync(System.DateTimeOffset? createdAt__gt, System.DateTimeOffset? createdAt__lt, System.DateTimeOffset? updatedAt__gt, System.DateTimeOffset? updatedAt__lt, int? limit, int? cursor, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "web/api/v2.1/agents"
                    urlBuilder_.Append("web/api/v2.1/agents");
                    urlBuilder_.Append('?');
                    if (createdAt__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAt__gt")).Append('=').Append(System.Uri.EscapeDataString(createdAt__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdAt__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAt__lt")).Append('=').Append(System.Uri.EscapeDataString(createdAt__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAt__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt__gt")).Append('=').Append(System.Uri.EscapeDataString(updatedAt__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAt__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt__lt")).Append('=').Append(System.Uri.EscapeDataString(updatedAt__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cursor != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Activities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AlertResponse> SyntheticS1_GetAlertsAsync(System.DateTimeOffset? createdAt__gt, System.DateTimeOffset? createdAt__lt, System.DateTimeOffset? updatedAt__gt, System.DateTimeOffset? updatedAt__lt, int? limit, int? cursor)
        {
            return SyntheticS1_GetAlertsAsync(createdAt__gt, createdAt__lt, updatedAt__gt, updatedAt__lt, limit, cursor, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Activities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AlertResponse> SyntheticS1_GetAlertsAsync(System.DateTimeOffset? createdAt__gt, System.DateTimeOffset? createdAt__lt, System.DateTimeOffset? updatedAt__gt, System.DateTimeOffset? updatedAt__lt, int? limit, int? cursor, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "web/api/v2.1/cloud-detection/alerts"
                    urlBuilder_.Append("web/api/v2.1/cloud-detection/alerts");
                    urlBuilder_.Append('?');
                    if (createdAt__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAt__gt")).Append('=').Append(System.Uri.EscapeDataString(createdAt__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdAt__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAt__lt")).Append('=').Append(System.Uri.EscapeDataString(createdAt__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAt__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt__gt")).Append('=').Append(System.Uri.EscapeDataString(updatedAt__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAt__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt__lt")).Append('=').Append(System.Uri.EscapeDataString(updatedAt__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cursor != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Activities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ThreatResponse> SyntheticS1_GetThreatsAsync(System.DateTimeOffset? createdAt__gt, System.DateTimeOffset? createdAt__lt, System.DateTimeOffset? updatedAt__gt, System.DateTimeOffset? updatedAt__lt, int? limit, int? cursor)
        {
            return SyntheticS1_GetThreatsAsync(createdAt__gt, createdAt__lt, updatedAt__gt, updatedAt__lt, limit, cursor, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Activities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ThreatResponse> SyntheticS1_GetThreatsAsync(System.DateTimeOffset? createdAt__gt, System.DateTimeOffset? createdAt__lt, System.DateTimeOffset? updatedAt__gt, System.DateTimeOffset? updatedAt__lt, int? limit, int? cursor, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "web/api/v2.1/threats"
                    urlBuilder_.Append("web/api/v2.1/threats");
                    urlBuilder_.Append('?');
                    if (createdAt__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAt__gt")).Append('=').Append(System.Uri.EscapeDataString(createdAt__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdAt__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAt__lt")).Append('=').Append(System.Uri.EscapeDataString(createdAt__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAt__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt__gt")).Append('=').Append(System.Uri.EscapeDataString(updatedAt__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAt__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt__lt")).Append('=').Append(System.Uri.EscapeDataString(updatedAt__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cursor != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ThreatResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Triage events</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TriageEventResponse> SyntheticDS_GetTriageEventsAsync(int? limit)
        {
            return SyntheticDS_GetTriageEventsAsync(limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Triage events</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TriageEventResponse> SyntheticDS_GetTriageEventsAsync(int? limit, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "v1/triage-item-events"
                    urlBuilder_.Append("v1/triage-item-events");
                    urlBuilder_.Append('?');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TriageEventResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Triage events</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TriageItemResponse> SyntheticDS_GetTriageItemsAsync(System.Guid? id)
        {
            return SyntheticDS_GetTriageItemsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Triage events</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TriageItemResponse> SyntheticDS_GetTriageItemsAsync(System.Guid? id, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "v1/triage-items"
                    urlBuilder_.Append("v1/triage-items");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TriageItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Alerts</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TriageAlert>> SyntheticDS_GetTriageAlertsAsync(System.Guid? id)
        {
            return SyntheticDS_GetTriageAlertsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Alerts</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TriageAlert>> SyntheticDS_GetTriageAlertsAsync(System.Guid? id, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "v1/alerts"
                    urlBuilder_.Append("v1/alerts");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TriageAlert>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Query results</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GnqlResponse> SyntheticGN_QueryAsync(string query, string scroll, int? size)
        {
            return SyntheticGN_QueryAsync(query, scroll, size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Query results</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GnqlResponse> SyntheticGN_QueryAsync(string query, string scroll, int? size, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "v2/experimental/gnql"
                    urlBuilder_.Append("v2/experimental/gnql");
                    urlBuilder_.Append('?');
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scroll != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("scroll")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scroll, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GnqlResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Activities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GroupsResponse> SyntheticS1_GetGroupsAsync(System.DateTimeOffset? createdAt__gt, System.DateTimeOffset? createdAt__lt, System.DateTimeOffset? updatedAt__gt, System.DateTimeOffset? updatedAt__lt, int? limit, int? cursor)
        {
            return SyntheticS1_GetGroupsAsync(createdAt__gt, createdAt__lt, updatedAt__gt, updatedAt__lt, limit, cursor, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Activities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupsResponse> SyntheticS1_GetGroupsAsync(System.DateTimeOffset? createdAt__gt, System.DateTimeOffset? createdAt__lt, System.DateTimeOffset? updatedAt__gt, System.DateTimeOffset? updatedAt__lt, int? limit, int? cursor, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "web/api/v2.1/groups"
                    urlBuilder_.Append("web/api/v2.1/groups");
                    urlBuilder_.Append('?');
                    if (createdAt__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAt__gt")).Append('=').Append(System.Uri.EscapeDataString(createdAt__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdAt__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdAt__lt")).Append('=').Append(System.Uri.EscapeDataString(createdAt__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAt__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt__gt")).Append('=').Append(System.Uri.EscapeDataString(updatedAt__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updatedAt__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updatedAt__lt")).Append('=').Append(System.Uri.EscapeDataString(updatedAt__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cursor != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cursor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cursor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureModesSpecification
    {

        [System.Text.Json.Serialization.JsonPropertyName("threats")]
        public int Threats { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public int Groups { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("alerts")]
        public int Alerts { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<CustomSentinelOneActivities_API> Data { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pagination")]
        public Pagination Pagination { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgentResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<CustomSentinelOneAgents_API> Data { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pagination")]
        public Pagination Pagination { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<CustomSentinelOneAlerts_API> Data { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pagination")]
        public Pagination Pagination { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThreatResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<CustomSentinelOneThreats_API> Data { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pagination")]
        public Pagination Pagination { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GroupsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<CustomSentinelOneGroups_API> Data { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pagination")]
        public Pagination Pagination { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TriageEventResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TriageEvent> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TriageItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<TriageItem> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TriageAlertResponse : System.Collections.ObjectModel.Collection<TriageAlert>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GnqlResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("complete")]
        public bool Complete { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("scroll")]
        public string Scroll { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("query")]
        public string Query { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<GnqlItem> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pagination
    {

        [System.Text.Json.Serialization.JsonPropertyName("nextCursor")]
        public int NextCursor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Group
    {
        /// <summary>
        /// The unique identifier for the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the record was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the record was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertInfo
    {
        /// <summary>
        /// The timestamp (UTC) when the record was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

    }

    /// <summary>
    /// source | project TimeGenerated = createdAt, AgentUpdatedVersion = agentUpdatedVersion, UserId = userId, ThreatId = threatId, PrimaryDescription = primaryDescription, SecondaryDescription = secondaryDescription, Id = id, GroupId = groupId, CreatedAt = createdAt, AccountName = accountName, Data = data, AgentId = agentId, Hash = hash, UpdatedAt = todatetime(updatedAt), Description = description, ActivityUuid = activityUuid, SiteId = siteId, ActivityType = activityType, SiteName = siteName, AccountId = accountId, OsFamily = osFamily, GroupName = groupName, Comments = comments
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomSentinelOneActivities_API
    {
        /// <summary>
        /// The version of the agent that was updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("agentUpdatedVersion")]
        public string AgentUpdatedVersion { get; set; }

        /// <summary>
        /// The unique identifier for the user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public System.Guid UserId { get; set; }

        /// <summary>
        /// The unique identifier for the threat.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("threatId")]
        public System.Guid ThreatId { get; set; }

        /// <summary>
        /// The primary description of the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("primaryDescription")]
        public string PrimaryDescription { get; set; }

        /// <summary>
        /// The secondary description of the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("secondaryDescription")]
        public string SecondaryDescription { get; set; }

        /// <summary>
        /// The unique identifier for the record.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The unique identifier for the group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        public System.Guid GroupId { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the record was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The name of the account associated with the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Activity metadata.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public string Data { get; set; }

        /// <summary>
        /// The unique identifier for the agent. (Modified to send in version#)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("agentId")]
        public string AgentId { get; set; }

        /// <summary>
        /// The hash associated with the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hash")]
        public string Hash { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the record was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The description of the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The UUID of the activity associated with the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activityUuid")]
        public string ActivityUuid { get; set; }

        /// <summary>
        /// The unique identifier for the site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public System.Guid SiteId { get; set; }

        /// <summary>
        /// The type of activity represented by an integer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activityType")]
        public int ActivityType { get; set; }

        /// <summary>
        /// The name of the site associated with the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteName")]
        public string SiteName { get; set; }

        /// <summary>
        /// The unique identifier for the account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public System.Guid AccountId { get; set; }

        /// <summary>
        /// The operating system family, such as macOS.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("osFamily")]
        public string OsFamily { get; set; }

        /// <summary>
        /// The name of the group associated with the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("groupName")]
        public string GroupName { get; set; }

        /// <summary>
        /// Any comments associated with the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comments")]
        public string Comments { get; set; }

    }

    /// <summary>
    /// source | project TimeGenerated = createdAt, Uuid = uuid, MitigationMode = mitigationMode, NetworkStatus = networkStatus, InstallerType = installerType, MitigationModeSuspicious = mitigationModeSuspicious, IsPendingUninstall = isPendingUninstall, InRemoteShellSession = inRemoteShellSession, LastLoggedInUserName = lastLoggedInUserName, OsRevision = osRevision, OsArch = osArch, Id = id, ComputerName = computerName, TotalMemory = totalMemory, CreatedAt = createdAt, GroupId = groupId, LastActiveDate = todatetime(lastActiveDate), FullDiskScanLastUpdatedAt = fullDiskScanLastUpdatedAt, AllowRemoteShell = allowRemoteShell, RangerVersion = rangerVersion, AccountName = accountName, ScanStatus = scanStatus, Domain = domain, MissingPermissions = missingPermissions, IsActive = isActive, GroupIp = groupIp, ThreatRebootRequired = threatRebootRequired, GroupUpdatedAt = groupUpdatedAt, ExternalId = externalId, MachineType = machineType, RegisteredAt = todatetime(registeredAt), AppsVulnerabilityStatus = appsVulnerabilityStatus, CoreCount = coreCount, Locations = locations, ScanFinishedAt = todatetime(scanFinishedAt), UpdatedAt = todatetime(updatedAt), ExternalIp = externalIp, LocationType = locationType, PolicyUpdatedAt = policyUpdatedAt, IsDecommissioned = isDecommissioned, CpuId = cpuId, NetworkInterfaces = networkInterfaces, IsUninstalled = isUninstalled, ActiveDirectory = activeDirectory, ScanStartedAt = todatetime(scanStartedAt), RangerStatus = rangerStatus, SiteId = siteId, AgentVersion = agentVersion, OsUsername = osUsername, EncryptedApplications = encryptedApplications, LastIpToMgmt = lastIpToMgmt, CpuCount = cpuCount, ScanAbortedAt = scanAbortedAt, SiteName = siteName, ActiveThreats = activeThreats, Infected = infected, ConsoleMigrationStatus = consoleMigrationStatus, OsType = osType, AccountId = accountId, GroupName = groupName, OsName = osName, IsUpToDate = isUpToDate, LicenseKey = licenseKey, UserActionsNeeded = userActionsNeeded, ModelName = modelName, OsStartTime = todatetime(osStartTime), NetworkQuarantineEnabled=networkQuarantineEnabled,OperationalStateExpiration=operationalStateExpiration,RemoteProfilingState=remoteProfilingState
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomSentinelOneAgents_API
    {
        /// <summary>
        /// The unique identifier for the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uuid")]
        public System.Guid Uuid { get; set; }

        /// <summary>
        /// The mitigation mode applied.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mitigationMode")]
        public string MitigationMode { get; set; }

        /// <summary>
        /// The network status of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("networkStatus")]
        public string NetworkStatus { get; set; }

        /// <summary>
        /// The type of installer used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("installerType")]
        public string InstallerType { get; set; }

        /// <summary>
        /// The suspicious mitigation mode applied.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mitigationModeSuspicious")]
        public string MitigationModeSuspicious { get; set; }

        /// <summary>
        /// Indicates whether the object is pending uninstallation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isPendingUninstall")]
        public bool IsPendingUninstall { get; set; }

        /// <summary>
        /// Indicates whether the object is in a remote shell session.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inRemoteShellSession")]
        public bool InRemoteShellSession { get; set; }

        /// <summary>
        /// The username of the last logged-in user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastLoggedInUserName")]
        public string LastLoggedInUserName { get; set; }

        /// <summary>
        /// The OS revision.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("osRevision")]
        public string OsRevision { get; set; }

        /// <summary>
        /// The OS architecture.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("osArch")]
        public string OsArch { get; set; }

        /// <summary>
        /// The unique identifier for the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The name of the computer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("computerName")]
        public string ComputerName { get; set; }

        /// <summary>
        /// The total memory available in MB.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalMemory")]
        public double TotalMemory { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the object was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The unique identifier for the group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        public System.Guid GroupId { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the object was last active.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastActiveDate")]
        public System.DateTimeOffset LastActiveDate { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the full disk scan was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fullDiskScanLastUpdatedAt")]
        public System.DateTimeOffset FullDiskScanLastUpdatedAt { get; set; }

        /// <summary>
        /// Indicates whether remote shell is allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("allowRemoteShell")]
        public bool AllowRemoteShell { get; set; }

        /// <summary>
        /// The version of the ranger.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rangerVersion")]
        public string RangerVersion { get; set; }

        /// <summary>
        /// The account name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// The scan status of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scanStatus")]
        public string ScanStatus { get; set; }

        /// <summary>
        /// The domain of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Details of the missing permissions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("missingPermissions")]
        public string MissingPermissions { get; set; }

        /// <summary>
        /// Indicates whether the object is active.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        /// <summary>
        /// The IP address of the group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("groupIp")]
        public string GroupIp { get; set; }

        /// <summary>
        /// Indicates whether a reboot is required due to a threat.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("threatRebootRequired")]
        public bool ThreatRebootRequired { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the group was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("groupUpdatedAt")]
        public System.DateTimeOffset GroupUpdatedAt { get; set; }

        /// <summary>
        /// The external identifier associated with the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// The type of machine.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("machineType")]
        public string MachineType { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the object was registered.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registeredAt")]
        public System.DateTimeOffset RegisteredAt { get; set; }

        /// <summary>
        /// The vulnerability status of the applications.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("appsVulnerabilityStatus")]
        public string AppsVulnerabilityStatus { get; set; }

        /// <summary>
        /// The number of CPU cores.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("coreCount")]
        public int CoreCount { get; set; }

        /// <summary>
        /// The locations associated with the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("locations")]
        public string Locations { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the scan was finished.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scanFinishedAt")]
        public System.DateTimeOffset ScanFinishedAt { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the object was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The external IP address of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("externalIp")]
        public string ExternalIp { get; set; }

        /// <summary>
        /// The type of location.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("locationType")]
        public string LocationType { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the policy was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policyUpdatedAt")]
        public System.DateTimeOffset PolicyUpdatedAt { get; set; }

        /// <summary>
        /// Indicates whether the object is decommissioned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isDecommissioned")]
        public bool IsDecommissioned { get; set; }

        /// <summary>
        /// The identifier of the CPU.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cpuId")]
        public string CpuId { get; set; }

        /// <summary>
        /// Details of the network interfaces.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("networkInterfaces")]
        public string NetworkInterfaces { get; set; }

        /// <summary>
        /// Indicates whether the object is uninstalled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isUninstalled")]
        public bool IsUninstalled { get; set; }

        /// <summary>
        /// Details about the active directory.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activeDirectory")]
        public string ActiveDirectory { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the scan was started.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scanStartedAt")]
        public System.DateTimeOffset ScanStartedAt { get; set; }

        /// <summary>
        /// The status of the ranger.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rangerStatus")]
        public string RangerStatus { get; set; }

        /// <summary>
        /// The unique identifier for the site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public System.Guid SiteId { get; set; }

        /// <summary>
        /// The version of the agent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("agentVersion")]
        public string AgentVersion { get; set; }

        /// <summary>
        /// The username associated with the operating system.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("osUsername")]
        public string OsUsername { get; set; }

        /// <summary>
        /// Indicates whether the applications are encrypted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encryptedApplications")]
        public bool EncryptedApplications { get; set; }

        /// <summary>
        /// The last IP address used for management.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastIpToMgmt")]
        public string LastIpToMgmt { get; set; }

        /// <summary>
        /// The number of CPUs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cpuCount")]
        public int CpuCount { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the scan was aborted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scanAbortedAt")]
        public System.DateTimeOffset ScanAbortedAt { get; set; }

        /// <summary>
        /// The name of the site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteName")]
        public string SiteName { get; set; }

        /// <summary>
        /// The number of active threats.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activeThreats")]
        public int ActiveThreats { get; set; }

        /// <summary>
        /// Indicates whether the object is infected.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("infected")]
        public bool Infected { get; set; }

        /// <summary>
        /// The status of the console migration.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("consoleMigrationStatus")]
        public string ConsoleMigrationStatus { get; set; }

        /// <summary>
        /// The type of operating system.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("osType")]
        public string OsType { get; set; }

        /// <summary>
        /// The unique identifier for the account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public System.Guid AccountId { get; set; }

        /// <summary>
        /// The name of the group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("groupName")]
        public string GroupName { get; set; }

        /// <summary>
        /// The name of the operating system.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("osName")]
        public string OsName { get; set; }

        /// <summary>
        /// Indicates whether the object is up to date.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isUpToDate")]
        public bool IsUpToDate { get; set; }

        /// <summary>
        /// The license key associated with the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("licenseKey")]
        public string LicenseKey { get; set; }

        /// <summary>
        /// Details of the user actions needed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("userActionsNeeded")]
        public string UserActionsNeeded { get; set; }

        /// <summary>
        /// The model name of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("modelName")]
        public string ModelName { get; set; }

        /// <summary>
        /// Is Network Quarantine Enabled on the device
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("networkQuarantineEnabled")]
        public bool NetworkQuarantineEnabled { get; set; }

        /// <summary>
        /// Agent operational state.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operationalStateExpiration")]
        public string OperationalStateExpiration { get; set; }

        /// <summary>
        /// Agent remote profiling state.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("remoteProfilingState")]
        public string RemoteProfilingState { get; set; }

        /// <summary>
        /// The Start time of the os.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("osStartTime")]
        public string OsStartTime { get; set; }

    }

    /// <summary>
    /// source | project TimeGenerated = todatetime(parse_json(todynamic(alertInfo)).createdAt), SourceProcessInfo = sourceProcessInfo, AlertInfo = alertInfo, AgentDetectionInfo = agentDetectionInfo, RuleInfo = ruleInfo, ContainerInfo = containerInfo, SourceParentProcessInfo = sourceParentProcessInfo, TargetProcessInfo = targetProcessInfo, KubernetesInfo = kubernetesInfo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomSentinelOneAlerts_API
    {
        /// <summary>
        /// Information about the source process.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sourceProcessInfo")]
        public string SourceProcessInfo { get; set; }

        /// <summary>
        /// Details about the alert. (Updated with defined schema)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("alertInfo")]
        public AlertInfo AlertInfo { get; set; }

        /// <summary>
        /// Detection information related to the agent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("agentDetectionInfo")]
        public string AgentDetectionInfo { get; set; }

        /// <summary>
        /// Information regarding the applied rule.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ruleInfo")]
        public string RuleInfo { get; set; }

        /// <summary>
        /// Information about the container.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("containerInfo")]
        public string ContainerInfo { get; set; }

        /// <summary>
        /// Information about the parent process of the source.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sourceParentProcessInfo")]
        public string SourceParentProcessInfo { get; set; }

        /// <summary>
        /// Details regarding the target process.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetProcessInfo")]
        public string TargetProcessInfo { get; set; }

        /// <summary>
        /// Kubernetes-related information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kubernetesInfo")]
        public string KubernetesInfo { get; set; }

    }

    /// <summary>
    /// source | project TimeGenerated = createdAt, Creator = creator, RegistrationToken = registrationToken, IsDefault = tostring(isDefault), UpdatedAt = todatetime(updatedAt), TotalAgents = tostring(totalAgents), Inherits = tostring(inherits), Name = name, Rank = rank, FilterName = filterName, GroupType = type, Id = id, CreatedAt = createdAt, CreatorId = creatorId, SiteId = siteId, FilterId = filterId
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomSentinelOneGroups_API
    {
        /// <summary>
        /// The name of the creator.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creator")]
        public string Creator { get; set; }

        /// <summary>
        /// The token used for registration.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registrationToken")]
        public string RegistrationToken { get; set; }

        /// <summary>
        /// Indicates whether this is the default setting.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isDefault")]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the object was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The total number of agents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalAgents")]
        public int TotalAgents { get; set; }

        /// <summary>
        /// Indicates whether the object inherits properties.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inherits")]
        public bool Inherits { get; set; }

        /// <summary>
        /// The name of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The rank of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rank")]
        public double Rank { get; set; }

        /// <summary>
        /// The name of the filter applied.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("filterName")]
        public string FilterName { get; set; }

        /// <summary>
        /// The type of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// The unique identifier for the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The timestamp (UTC) when the object was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The unique identifier of the creator.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creatorId")]
        public System.Guid CreatorId { get; set; }

        /// <summary>
        /// The unique identifier of the site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteId")]
        public System.Guid SiteId { get; set; }

        /// <summary>
        /// The unique identifier of the filter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("filterId")]
        public System.Guid FilterId { get; set; }

    }

    /// <summary>
    /// source | extend ThreatInfo = parse_json(todynamic(threatInfo)), AgentDetectionInfo=parse_json(todynamic(agentDetectionInfo)), AgentRealtimeInfo=parse_json(todynamic(agentRealtimeInfo)) | project TimeGenerated = todatetime(ThreatInfo.createdAt), FilePath = tostring(ThreatInfo.filePath), CloudVerdict = tostring(ThreatInfo.cloudVerdict), MitigationMode = tostring(AgentDetectionInfo.mitigationMode), AgentOsType = tostring(AgentRealtimeInfo.agentOsType), AgentInfected = tobool(AgentRealtimeInfo.agentInfected), InitiatingUserId = tostring(ThreatInfo.initiatingUserId), Engines = tostring(ThreatInfo.engines), Id = id, FileExtensionType = tostring(ThreatInfo.fileExtensionType), MitigationStatus = tostring(ThreatInfo.mitigationStatus), AgentDomain = tostring(AgentDetectionInfo.agentDomain), CreatedAt = todatetime(ThreatInfo.createdAt), IsCertValid = tobool(ThreatInfo.isValidCertificate), FileDisplayName = tostring(ThreatInfo.filePath), AgentIp = tostring(AgentDetectionInfo.agentIpV4), AccountName = tostring(AgentRealtimeInfo.accountName), AgentMachineType = tostring(AgentRealtimeInfo.agentMachineType), FileVerificationType = tostring(ThreatInfo.fileVerificationType), Indicators = indicators, InitiatedByDescription = tostring(ThreatInfo.initiatedByDescription), AutomaticallyResolved = tobool(ThreatInfo.automaticallyResolved), AgentId = tostring(AgentRealtimeInfo.agentId), ProcessArguments = tostring(ThreatInfo.maliciousProcessArguments), MitigationReport = tostring(AgentDetectionInfo.mitigationReport), ThreatName = tostring(ThreatInfo.threatName), ClassificationSource = tostring(ThreatInfo.classificationSource), UpdatedAt = todatetime(ThreatInfo.updatedAt), InitiatedBy = tostring(ThreatInfo.initiatedBy), AgentNetworkStatus = tostring(AgentRealtimeInfo.agentNetworkStatus), AgentComputerName = tostring(AgentRealtimeInfo.agentComputerName), Classification = tostring(ThreatInfo.classification), CertId = tostring(ThreatInfo.certificateId), AgentIsActive = tobool(AgentRealtimeInfo.agentIsActive), SiteId = tostring(AgentDetectionInfo.siteId), AgentVersion = tostring(AgentDetectionInfo.agentVersion), FileContentHash = tostring(ThreatInfo.md5), WhiteningOptions = whiteningOptions,FileSha256 = tostring(ThreatInfo.sha256), Username = tostring(ThreatInfo.initiatingUsername), AgentIsDecommissioned = tobool(AgentDetectionInfo.agentIsDecommissioned), CollectionId = tostring(ThreatInfo.collectionId), SiteName = tostring(AgentDetectionInfo.siteName), AccountId = tostring(AgentDetectionInfo.accountId), ThreatInfo, AgentDetectionInfo, AgentRealtimeInfo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomSentinelOneThreats_API
    {
        /// <summary>
        /// The information regarding the threat.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("threatInfo")]
        public string ThreatInfo { get; set; }

        /// <summary>
        /// The information of the agent on detectino.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("agentDetectionInfo")]
        public string AgentDetectionInfo { get; set; }

        /// <summary>
        /// The information of the agent in real time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("agentRealtimeInfo")]
        public string AgentRealtimeInfo { get; set; }

        /// <summary>
        /// Details of the indicators.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indicators")]
        public string Indicators { get; set; }

        /// <summary>
        /// Details of the whitening options.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("whiteningOptions")]
        public string WhiteningOptions { get; set; }

        /// <summary>
        /// Event Id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TriageAlert
    {

        [System.Text.Json.Serialization.JsonPropertyName("triage")]
        public CustomSentinelOneThreats_API Triage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public CustomSentinelOneAgents_API Items { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("alerts")]
        public CustomSentinelOneAlerts_API Alerts { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TriageEvent
    {
        /// <summary>
        /// The unique identifier for the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("triage-item-id")]
        public System.Guid TriageItemId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TriageItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public TriageItemSource Source { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TriageItemSource
    {
        /// <summary>
        /// The unique identifier for the alert
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("alert-id")]
        public System.Guid AlertId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GnqlItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("ip")]
        public string Ip { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("seen")]
        public bool Seen { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("classification")]
        public string Classification { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625